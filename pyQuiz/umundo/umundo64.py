# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_umundoNativePython64', [dirname(__file__)])
        except ImportError:
            import _umundoNativePython64
            return _umundoNativePython64
        if fp is not None:
            try:
                _mod = imp.load_module('_umundoNativePython64', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _umundoNativePython64 = swig_import_helper()
    del swig_import_helper
else:
    import _umundoNativePython64
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _umundoNativePython64.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _umundoNativePython64.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _umundoNativePython64.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _umundoNativePython64.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _umundoNativePython64.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _umundoNativePython64.SwigPyIterator_equal(self, x)

    def copy(self):
        return _umundoNativePython64.SwigPyIterator_copy(self)

    def next(self):
        return _umundoNativePython64.SwigPyIterator_next(self)

    def __next__(self):
        return _umundoNativePython64.SwigPyIterator___next__(self)

    def previous(self):
        return _umundoNativePython64.SwigPyIterator_previous(self)

    def advance(self, n):
        return _umundoNativePython64.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _umundoNativePython64.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _umundoNativePython64.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _umundoNativePython64.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _umundoNativePython64.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _umundoNativePython64.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _umundoNativePython64.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _umundoNativePython64.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class StringArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringArray, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _umundoNativePython64.StringArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _umundoNativePython64.StringArray___nonzero__(self)

    def __bool__(self):
        return _umundoNativePython64.StringArray___bool__(self)

    def __len__(self):
        return _umundoNativePython64.StringArray___len__(self)

    def __getslice__(self, i, j):
        return _umundoNativePython64.StringArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _umundoNativePython64.StringArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _umundoNativePython64.StringArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _umundoNativePython64.StringArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _umundoNativePython64.StringArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _umundoNativePython64.StringArray___setitem__(self, *args)

    def pop(self):
        return _umundoNativePython64.StringArray_pop(self)

    def append(self, x):
        return _umundoNativePython64.StringArray_append(self, x)

    def empty(self):
        return _umundoNativePython64.StringArray_empty(self)

    def size(self):
        return _umundoNativePython64.StringArray_size(self)

    def swap(self, v):
        return _umundoNativePython64.StringArray_swap(self, v)

    def begin(self):
        return _umundoNativePython64.StringArray_begin(self)

    def end(self):
        return _umundoNativePython64.StringArray_end(self)

    def rbegin(self):
        return _umundoNativePython64.StringArray_rbegin(self)

    def rend(self):
        return _umundoNativePython64.StringArray_rend(self)

    def clear(self):
        return _umundoNativePython64.StringArray_clear(self)

    def get_allocator(self):
        return _umundoNativePython64.StringArray_get_allocator(self)

    def pop_back(self):
        return _umundoNativePython64.StringArray_pop_back(self)

    def erase(self, *args):
        return _umundoNativePython64.StringArray_erase(self, *args)

    def __init__(self, *args):
        this = _umundoNativePython64.new_StringArray(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _umundoNativePython64.StringArray_push_back(self, x)

    def front(self):
        return _umundoNativePython64.StringArray_front(self)

    def back(self):
        return _umundoNativePython64.StringArray_back(self)

    def assign(self, n, x):
        return _umundoNativePython64.StringArray_assign(self, n, x)

    def resize(self, *args):
        return _umundoNativePython64.StringArray_resize(self, *args)

    def insert(self, *args):
        return _umundoNativePython64.StringArray_insert(self, *args)

    def reserve(self, n):
        return _umundoNativePython64.StringArray_reserve(self, n)

    def capacity(self):
        return _umundoNativePython64.StringArray_capacity(self)
    __swig_destroy__ = _umundoNativePython64.delete_StringArray
    __del__ = lambda self: None
StringArray_swigregister = _umundoNativePython64.StringArray_swigregister
StringArray_swigregister(StringArray)

class StringMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringMap, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _umundoNativePython64.StringMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _umundoNativePython64.StringMap___nonzero__(self)

    def __bool__(self):
        return _umundoNativePython64.StringMap___bool__(self)

    def __len__(self):
        return _umundoNativePython64.StringMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _umundoNativePython64.StringMap___getitem__(self, key)

    def __delitem__(self, key):
        return _umundoNativePython64.StringMap___delitem__(self, key)

    def has_key(self, key):
        return _umundoNativePython64.StringMap_has_key(self, key)

    def keys(self):
        return _umundoNativePython64.StringMap_keys(self)

    def values(self):
        return _umundoNativePython64.StringMap_values(self)

    def items(self):
        return _umundoNativePython64.StringMap_items(self)

    def __contains__(self, key):
        return _umundoNativePython64.StringMap___contains__(self, key)

    def key_iterator(self):
        return _umundoNativePython64.StringMap_key_iterator(self)

    def value_iterator(self):
        return _umundoNativePython64.StringMap_value_iterator(self)

    def __setitem__(self, *args):
        return _umundoNativePython64.StringMap___setitem__(self, *args)

    def asdict(self):
        return _umundoNativePython64.StringMap_asdict(self)

    def __init__(self, *args):
        this = _umundoNativePython64.new_StringMap(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def empty(self):
        return _umundoNativePython64.StringMap_empty(self)

    def size(self):
        return _umundoNativePython64.StringMap_size(self)

    def swap(self, v):
        return _umundoNativePython64.StringMap_swap(self, v)

    def begin(self):
        return _umundoNativePython64.StringMap_begin(self)

    def end(self):
        return _umundoNativePython64.StringMap_end(self)

    def rbegin(self):
        return _umundoNativePython64.StringMap_rbegin(self)

    def rend(self):
        return _umundoNativePython64.StringMap_rend(self)

    def clear(self):
        return _umundoNativePython64.StringMap_clear(self)

    def get_allocator(self):
        return _umundoNativePython64.StringMap_get_allocator(self)

    def count(self, x):
        return _umundoNativePython64.StringMap_count(self, x)

    def erase(self, *args):
        return _umundoNativePython64.StringMap_erase(self, *args)

    def find(self, x):
        return _umundoNativePython64.StringMap_find(self, x)

    def lower_bound(self, x):
        return _umundoNativePython64.StringMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _umundoNativePython64.StringMap_upper_bound(self, x)
    __swig_destroy__ = _umundoNativePython64.delete_StringMap
    __del__ = lambda self: None
StringMap_swigregister = _umundoNativePython64.StringMap_swigregister
StringMap_swigregister(StringMap)

class PublisherMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PublisherMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PublisherMap, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _umundoNativePython64.PublisherMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _umundoNativePython64.PublisherMap___nonzero__(self)

    def __bool__(self):
        return _umundoNativePython64.PublisherMap___bool__(self)

    def __len__(self):
        return _umundoNativePython64.PublisherMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _umundoNativePython64.PublisherMap___getitem__(self, key)

    def __delitem__(self, key):
        return _umundoNativePython64.PublisherMap___delitem__(self, key)

    def has_key(self, key):
        return _umundoNativePython64.PublisherMap_has_key(self, key)

    def keys(self):
        return _umundoNativePython64.PublisherMap_keys(self)

    def values(self):
        return _umundoNativePython64.PublisherMap_values(self)

    def items(self):
        return _umundoNativePython64.PublisherMap_items(self)

    def __contains__(self, key):
        return _umundoNativePython64.PublisherMap___contains__(self, key)

    def key_iterator(self):
        return _umundoNativePython64.PublisherMap_key_iterator(self)

    def value_iterator(self):
        return _umundoNativePython64.PublisherMap_value_iterator(self)

    def __setitem__(self, *args):
        return _umundoNativePython64.PublisherMap___setitem__(self, *args)

    def asdict(self):
        return _umundoNativePython64.PublisherMap_asdict(self)

    def __init__(self, *args):
        this = _umundoNativePython64.new_PublisherMap(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def empty(self):
        return _umundoNativePython64.PublisherMap_empty(self)

    def size(self):
        return _umundoNativePython64.PublisherMap_size(self)

    def swap(self, v):
        return _umundoNativePython64.PublisherMap_swap(self, v)

    def begin(self):
        return _umundoNativePython64.PublisherMap_begin(self)

    def end(self):
        return _umundoNativePython64.PublisherMap_end(self)

    def rbegin(self):
        return _umundoNativePython64.PublisherMap_rbegin(self)

    def rend(self):
        return _umundoNativePython64.PublisherMap_rend(self)

    def clear(self):
        return _umundoNativePython64.PublisherMap_clear(self)

    def get_allocator(self):
        return _umundoNativePython64.PublisherMap_get_allocator(self)

    def count(self, x):
        return _umundoNativePython64.PublisherMap_count(self, x)

    def erase(self, *args):
        return _umundoNativePython64.PublisherMap_erase(self, *args)

    def find(self, x):
        return _umundoNativePython64.PublisherMap_find(self, x)

    def lower_bound(self, x):
        return _umundoNativePython64.PublisherMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _umundoNativePython64.PublisherMap_upper_bound(self, x)
    __swig_destroy__ = _umundoNativePython64.delete_PublisherMap
    __del__ = lambda self: None
PublisherMap_swigregister = _umundoNativePython64.PublisherMap_swigregister
PublisherMap_swigregister(PublisherMap)

class SubscriberMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SubscriberMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SubscriberMap, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _umundoNativePython64.SubscriberMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _umundoNativePython64.SubscriberMap___nonzero__(self)

    def __bool__(self):
        return _umundoNativePython64.SubscriberMap___bool__(self)

    def __len__(self):
        return _umundoNativePython64.SubscriberMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _umundoNativePython64.SubscriberMap___getitem__(self, key)

    def __delitem__(self, key):
        return _umundoNativePython64.SubscriberMap___delitem__(self, key)

    def has_key(self, key):
        return _umundoNativePython64.SubscriberMap_has_key(self, key)

    def keys(self):
        return _umundoNativePython64.SubscriberMap_keys(self)

    def values(self):
        return _umundoNativePython64.SubscriberMap_values(self)

    def items(self):
        return _umundoNativePython64.SubscriberMap_items(self)

    def __contains__(self, key):
        return _umundoNativePython64.SubscriberMap___contains__(self, key)

    def key_iterator(self):
        return _umundoNativePython64.SubscriberMap_key_iterator(self)

    def value_iterator(self):
        return _umundoNativePython64.SubscriberMap_value_iterator(self)

    def __setitem__(self, *args):
        return _umundoNativePython64.SubscriberMap___setitem__(self, *args)

    def asdict(self):
        return _umundoNativePython64.SubscriberMap_asdict(self)

    def __init__(self, *args):
        this = _umundoNativePython64.new_SubscriberMap(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def empty(self):
        return _umundoNativePython64.SubscriberMap_empty(self)

    def size(self):
        return _umundoNativePython64.SubscriberMap_size(self)

    def swap(self, v):
        return _umundoNativePython64.SubscriberMap_swap(self, v)

    def begin(self):
        return _umundoNativePython64.SubscriberMap_begin(self)

    def end(self):
        return _umundoNativePython64.SubscriberMap_end(self)

    def rbegin(self):
        return _umundoNativePython64.SubscriberMap_rbegin(self)

    def rend(self):
        return _umundoNativePython64.SubscriberMap_rend(self)

    def clear(self):
        return _umundoNativePython64.SubscriberMap_clear(self)

    def get_allocator(self):
        return _umundoNativePython64.SubscriberMap_get_allocator(self)

    def count(self, x):
        return _umundoNativePython64.SubscriberMap_count(self, x)

    def erase(self, *args):
        return _umundoNativePython64.SubscriberMap_erase(self, *args)

    def find(self, x):
        return _umundoNativePython64.SubscriberMap_find(self, x)

    def lower_bound(self, x):
        return _umundoNativePython64.SubscriberMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _umundoNativePython64.SubscriberMap_upper_bound(self, x)
    __swig_destroy__ = _umundoNativePython64.delete_SubscriberMap
    __del__ = lambda self: None
SubscriberMap_swigregister = _umundoNativePython64.SubscriberMap_swigregister
SubscriberMap_swigregister(SubscriberMap)

class PublisherStubMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PublisherStubMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PublisherStubMap, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _umundoNativePython64.PublisherStubMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _umundoNativePython64.PublisherStubMap___nonzero__(self)

    def __bool__(self):
        return _umundoNativePython64.PublisherStubMap___bool__(self)

    def __len__(self):
        return _umundoNativePython64.PublisherStubMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _umundoNativePython64.PublisherStubMap___getitem__(self, key)

    def __delitem__(self, key):
        return _umundoNativePython64.PublisherStubMap___delitem__(self, key)

    def has_key(self, key):
        return _umundoNativePython64.PublisherStubMap_has_key(self, key)

    def keys(self):
        return _umundoNativePython64.PublisherStubMap_keys(self)

    def values(self):
        return _umundoNativePython64.PublisherStubMap_values(self)

    def items(self):
        return _umundoNativePython64.PublisherStubMap_items(self)

    def __contains__(self, key):
        return _umundoNativePython64.PublisherStubMap___contains__(self, key)

    def key_iterator(self):
        return _umundoNativePython64.PublisherStubMap_key_iterator(self)

    def value_iterator(self):
        return _umundoNativePython64.PublisherStubMap_value_iterator(self)

    def __setitem__(self, *args):
        return _umundoNativePython64.PublisherStubMap___setitem__(self, *args)

    def asdict(self):
        return _umundoNativePython64.PublisherStubMap_asdict(self)

    def __init__(self, *args):
        this = _umundoNativePython64.new_PublisherStubMap(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def empty(self):
        return _umundoNativePython64.PublisherStubMap_empty(self)

    def size(self):
        return _umundoNativePython64.PublisherStubMap_size(self)

    def swap(self, v):
        return _umundoNativePython64.PublisherStubMap_swap(self, v)

    def begin(self):
        return _umundoNativePython64.PublisherStubMap_begin(self)

    def end(self):
        return _umundoNativePython64.PublisherStubMap_end(self)

    def rbegin(self):
        return _umundoNativePython64.PublisherStubMap_rbegin(self)

    def rend(self):
        return _umundoNativePython64.PublisherStubMap_rend(self)

    def clear(self):
        return _umundoNativePython64.PublisherStubMap_clear(self)

    def get_allocator(self):
        return _umundoNativePython64.PublisherStubMap_get_allocator(self)

    def count(self, x):
        return _umundoNativePython64.PublisherStubMap_count(self, x)

    def erase(self, *args):
        return _umundoNativePython64.PublisherStubMap_erase(self, *args)

    def find(self, x):
        return _umundoNativePython64.PublisherStubMap_find(self, x)

    def lower_bound(self, x):
        return _umundoNativePython64.PublisherStubMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _umundoNativePython64.PublisherStubMap_upper_bound(self, x)
    __swig_destroy__ = _umundoNativePython64.delete_PublisherStubMap
    __del__ = lambda self: None
PublisherStubMap_swigregister = _umundoNativePython64.PublisherStubMap_swigregister
PublisherStubMap_swigregister(PublisherStubMap)

class SubscriberStubMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SubscriberStubMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SubscriberStubMap, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _umundoNativePython64.SubscriberStubMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _umundoNativePython64.SubscriberStubMap___nonzero__(self)

    def __bool__(self):
        return _umundoNativePython64.SubscriberStubMap___bool__(self)

    def __len__(self):
        return _umundoNativePython64.SubscriberStubMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _umundoNativePython64.SubscriberStubMap___getitem__(self, key)

    def __delitem__(self, key):
        return _umundoNativePython64.SubscriberStubMap___delitem__(self, key)

    def has_key(self, key):
        return _umundoNativePython64.SubscriberStubMap_has_key(self, key)

    def keys(self):
        return _umundoNativePython64.SubscriberStubMap_keys(self)

    def values(self):
        return _umundoNativePython64.SubscriberStubMap_values(self)

    def items(self):
        return _umundoNativePython64.SubscriberStubMap_items(self)

    def __contains__(self, key):
        return _umundoNativePython64.SubscriberStubMap___contains__(self, key)

    def key_iterator(self):
        return _umundoNativePython64.SubscriberStubMap_key_iterator(self)

    def value_iterator(self):
        return _umundoNativePython64.SubscriberStubMap_value_iterator(self)

    def __setitem__(self, *args):
        return _umundoNativePython64.SubscriberStubMap___setitem__(self, *args)

    def asdict(self):
        return _umundoNativePython64.SubscriberStubMap_asdict(self)

    def __init__(self, *args):
        this = _umundoNativePython64.new_SubscriberStubMap(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def empty(self):
        return _umundoNativePython64.SubscriberStubMap_empty(self)

    def size(self):
        return _umundoNativePython64.SubscriberStubMap_size(self)

    def swap(self, v):
        return _umundoNativePython64.SubscriberStubMap_swap(self, v)

    def begin(self):
        return _umundoNativePython64.SubscriberStubMap_begin(self)

    def end(self):
        return _umundoNativePython64.SubscriberStubMap_end(self)

    def rbegin(self):
        return _umundoNativePython64.SubscriberStubMap_rbegin(self)

    def rend(self):
        return _umundoNativePython64.SubscriberStubMap_rend(self)

    def clear(self):
        return _umundoNativePython64.SubscriberStubMap_clear(self)

    def get_allocator(self):
        return _umundoNativePython64.SubscriberStubMap_get_allocator(self)

    def count(self, x):
        return _umundoNativePython64.SubscriberStubMap_count(self, x)

    def erase(self, *args):
        return _umundoNativePython64.SubscriberStubMap_erase(self, *args)

    def find(self, x):
        return _umundoNativePython64.SubscriberStubMap_find(self, x)

    def lower_bound(self, x):
        return _umundoNativePython64.SubscriberStubMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _umundoNativePython64.SubscriberStubMap_upper_bound(self, x)
    __swig_destroy__ = _umundoNativePython64.delete_SubscriberStubMap
    __del__ = lambda self: None
SubscriberStubMap_swigregister = _umundoNativePython64.SubscriberStubMap_swigregister
SubscriberStubMap_swigregister(SubscriberStubMap)

class NodeStubMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeStubMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NodeStubMap, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _umundoNativePython64.NodeStubMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _umundoNativePython64.NodeStubMap___nonzero__(self)

    def __bool__(self):
        return _umundoNativePython64.NodeStubMap___bool__(self)

    def __len__(self):
        return _umundoNativePython64.NodeStubMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _umundoNativePython64.NodeStubMap___getitem__(self, key)

    def __delitem__(self, key):
        return _umundoNativePython64.NodeStubMap___delitem__(self, key)

    def has_key(self, key):
        return _umundoNativePython64.NodeStubMap_has_key(self, key)

    def keys(self):
        return _umundoNativePython64.NodeStubMap_keys(self)

    def values(self):
        return _umundoNativePython64.NodeStubMap_values(self)

    def items(self):
        return _umundoNativePython64.NodeStubMap_items(self)

    def __contains__(self, key):
        return _umundoNativePython64.NodeStubMap___contains__(self, key)

    def key_iterator(self):
        return _umundoNativePython64.NodeStubMap_key_iterator(self)

    def value_iterator(self):
        return _umundoNativePython64.NodeStubMap_value_iterator(self)

    def __setitem__(self, *args):
        return _umundoNativePython64.NodeStubMap___setitem__(self, *args)

    def asdict(self):
        return _umundoNativePython64.NodeStubMap_asdict(self)

    def __init__(self, *args):
        this = _umundoNativePython64.new_NodeStubMap(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def empty(self):
        return _umundoNativePython64.NodeStubMap_empty(self)

    def size(self):
        return _umundoNativePython64.NodeStubMap_size(self)

    def swap(self, v):
        return _umundoNativePython64.NodeStubMap_swap(self, v)

    def begin(self):
        return _umundoNativePython64.NodeStubMap_begin(self)

    def end(self):
        return _umundoNativePython64.NodeStubMap_end(self)

    def rbegin(self):
        return _umundoNativePython64.NodeStubMap_rbegin(self)

    def rend(self):
        return _umundoNativePython64.NodeStubMap_rend(self)

    def clear(self):
        return _umundoNativePython64.NodeStubMap_clear(self)

    def get_allocator(self):
        return _umundoNativePython64.NodeStubMap_get_allocator(self)

    def count(self, x):
        return _umundoNativePython64.NodeStubMap_count(self, x)

    def erase(self, *args):
        return _umundoNativePython64.NodeStubMap_erase(self, *args)

    def find(self, x):
        return _umundoNativePython64.NodeStubMap_find(self, x)

    def lower_bound(self, x):
        return _umundoNativePython64.NodeStubMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _umundoNativePython64.NodeStubMap_upper_bound(self, x)
    __swig_destroy__ = _umundoNativePython64.delete_NodeStubMap
    __del__ = lambda self: None
NodeStubMap_swigregister = _umundoNativePython64.NodeStubMap_swigregister
NodeStubMap_swigregister(NodeStubMap)

class EndPointResultSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EndPointResultSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EndPointResultSet, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _umundoNativePython64.delete_EndPointResultSet
    __del__ = lambda self: None

    def add(self, *args):
        return _umundoNativePython64.EndPointResultSet_add(self, *args)

    def remove(self, *args):
        return _umundoNativePython64.EndPointResultSet_remove(self, *args)

    def change(self, *args):
        return _umundoNativePython64.EndPointResultSet_change(self, *args)
EndPointResultSet_swigregister = _umundoNativePython64.EndPointResultSet_swigregister
EndPointResultSet_swigregister(EndPointResultSet)

class EndPointArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EndPointArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EndPointArray, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _umundoNativePython64.EndPointArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _umundoNativePython64.EndPointArray___nonzero__(self)

    def __bool__(self):
        return _umundoNativePython64.EndPointArray___bool__(self)

    def __len__(self):
        return _umundoNativePython64.EndPointArray___len__(self)

    def __getslice__(self, i, j):
        return _umundoNativePython64.EndPointArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _umundoNativePython64.EndPointArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _umundoNativePython64.EndPointArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _umundoNativePython64.EndPointArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _umundoNativePython64.EndPointArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _umundoNativePython64.EndPointArray___setitem__(self, *args)

    def pop(self):
        return _umundoNativePython64.EndPointArray_pop(self)

    def append(self, x):
        return _umundoNativePython64.EndPointArray_append(self, x)

    def empty(self):
        return _umundoNativePython64.EndPointArray_empty(self)

    def size(self):
        return _umundoNativePython64.EndPointArray_size(self)

    def swap(self, v):
        return _umundoNativePython64.EndPointArray_swap(self, v)

    def begin(self):
        return _umundoNativePython64.EndPointArray_begin(self)

    def end(self):
        return _umundoNativePython64.EndPointArray_end(self)

    def rbegin(self):
        return _umundoNativePython64.EndPointArray_rbegin(self)

    def rend(self):
        return _umundoNativePython64.EndPointArray_rend(self)

    def clear(self):
        return _umundoNativePython64.EndPointArray_clear(self)

    def get_allocator(self):
        return _umundoNativePython64.EndPointArray_get_allocator(self)

    def pop_back(self):
        return _umundoNativePython64.EndPointArray_pop_back(self)

    def erase(self, *args):
        return _umundoNativePython64.EndPointArray_erase(self, *args)

    def __init__(self, *args):
        this = _umundoNativePython64.new_EndPointArray(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _umundoNativePython64.EndPointArray_push_back(self, x)

    def front(self):
        return _umundoNativePython64.EndPointArray_front(self)

    def back(self):
        return _umundoNativePython64.EndPointArray_back(self)

    def assign(self, n, x):
        return _umundoNativePython64.EndPointArray_assign(self, n, x)

    def resize(self, *args):
        return _umundoNativePython64.EndPointArray_resize(self, *args)

    def insert(self, *args):
        return _umundoNativePython64.EndPointArray_insert(self, *args)

    def reserve(self, n):
        return _umundoNativePython64.EndPointArray_reserve(self, n)

    def capacity(self):
        return _umundoNativePython64.EndPointArray_capacity(self)
    __swig_destroy__ = _umundoNativePython64.delete_EndPointArray
    __del__ = lambda self: None
EndPointArray_swigregister = _umundoNativePython64.EndPointArray_swigregister
EndPointArray_swigregister(EndPointArray)

class InterfaceArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InterfaceArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InterfaceArray, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _umundoNativePython64.InterfaceArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _umundoNativePython64.InterfaceArray___nonzero__(self)

    def __bool__(self):
        return _umundoNativePython64.InterfaceArray___bool__(self)

    def __len__(self):
        return _umundoNativePython64.InterfaceArray___len__(self)

    def __getslice__(self, i, j):
        return _umundoNativePython64.InterfaceArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _umundoNativePython64.InterfaceArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _umundoNativePython64.InterfaceArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _umundoNativePython64.InterfaceArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _umundoNativePython64.InterfaceArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _umundoNativePython64.InterfaceArray___setitem__(self, *args)

    def pop(self):
        return _umundoNativePython64.InterfaceArray_pop(self)

    def append(self, x):
        return _umundoNativePython64.InterfaceArray_append(self, x)

    def empty(self):
        return _umundoNativePython64.InterfaceArray_empty(self)

    def size(self):
        return _umundoNativePython64.InterfaceArray_size(self)

    def swap(self, v):
        return _umundoNativePython64.InterfaceArray_swap(self, v)

    def begin(self):
        return _umundoNativePython64.InterfaceArray_begin(self)

    def end(self):
        return _umundoNativePython64.InterfaceArray_end(self)

    def rbegin(self):
        return _umundoNativePython64.InterfaceArray_rbegin(self)

    def rend(self):
        return _umundoNativePython64.InterfaceArray_rend(self)

    def clear(self):
        return _umundoNativePython64.InterfaceArray_clear(self)

    def get_allocator(self):
        return _umundoNativePython64.InterfaceArray_get_allocator(self)

    def pop_back(self):
        return _umundoNativePython64.InterfaceArray_pop_back(self)

    def erase(self, *args):
        return _umundoNativePython64.InterfaceArray_erase(self, *args)

    def __init__(self, *args):
        this = _umundoNativePython64.new_InterfaceArray(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _umundoNativePython64.InterfaceArray_push_back(self, x)

    def front(self):
        return _umundoNativePython64.InterfaceArray_front(self)

    def back(self):
        return _umundoNativePython64.InterfaceArray_back(self)

    def assign(self, n, x):
        return _umundoNativePython64.InterfaceArray_assign(self, n, x)

    def resize(self, *args):
        return _umundoNativePython64.InterfaceArray_resize(self, *args)

    def insert(self, *args):
        return _umundoNativePython64.InterfaceArray_insert(self, *args)

    def reserve(self, n):
        return _umundoNativePython64.InterfaceArray_reserve(self, n)

    def capacity(self):
        return _umundoNativePython64.InterfaceArray_capacity(self)
    __swig_destroy__ = _umundoNativePython64.delete_InterfaceArray
    __del__ = lambda self: None
InterfaceArray_swigregister = _umundoNativePython64.InterfaceArray_swigregister
InterfaceArray_swigregister(InterfaceArray)

class Interface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Interface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Interface, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ipv4"] = _umundoNativePython64.Interface_ipv4_set
    __swig_getmethods__["ipv4"] = _umundoNativePython64.Interface_ipv4_get
    if _newclass:
        ipv4 = _swig_property(_umundoNativePython64.Interface_ipv4_get, _umundoNativePython64.Interface_ipv4_set)
    __swig_setmethods__["ipv6"] = _umundoNativePython64.Interface_ipv6_set
    __swig_getmethods__["ipv6"] = _umundoNativePython64.Interface_ipv6_get
    if _newclass:
        ipv6 = _swig_property(_umundoNativePython64.Interface_ipv6_get, _umundoNativePython64.Interface_ipv6_set)
    __swig_setmethods__["mac"] = _umundoNativePython64.Interface_mac_set
    __swig_getmethods__["mac"] = _umundoNativePython64.Interface_mac_get
    if _newclass:
        mac = _swig_property(_umundoNativePython64.Interface_mac_get, _umundoNativePython64.Interface_mac_set)
    __swig_setmethods__["name"] = _umundoNativePython64.Interface_name_set
    __swig_getmethods__["name"] = _umundoNativePython64.Interface_name_get
    if _newclass:
        name = _swig_property(_umundoNativePython64.Interface_name_get, _umundoNativePython64.Interface_name_set)

    def __init__(self):
        this = _umundoNativePython64.new_Interface()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _umundoNativePython64.delete_Interface
    __del__ = lambda self: None
Interface_swigregister = _umundoNativePython64.Interface_swigregister
Interface_swigregister(Interface)

class Host(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Host, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Host, name)
    __repr__ = _swig_repr
    __swig_getmethods__["getHostname"] = lambda x: _umundoNativePython64.Host_getHostname
    if _newclass:
        getHostname = staticmethod(_umundoNativePython64.Host_getHostname)
    __swig_getmethods__["getInterfaces"] = lambda x: _umundoNativePython64.Host_getInterfaces
    if _newclass:
        getInterfaces = staticmethod(_umundoNativePython64.Host_getInterfaces)
    __swig_getmethods__["getHostId"] = lambda x: _umundoNativePython64.Host_getHostId
    if _newclass:
        getHostId = staticmethod(_umundoNativePython64.Host_getHostId)

    def __init__(self):
        this = _umundoNativePython64.new_Host()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _umundoNativePython64.delete_Host
    __del__ = lambda self: None
Host_swigregister = _umundoNativePython64.Host_swigregister
Host_swigregister(Host)

def Host_getHostname():
    return _umundoNativePython64.Host_getHostname()
Host_getHostname = _umundoNativePython64.Host_getHostname

def Host_getInterfaces():
    return _umundoNativePython64.Host_getInterfaces()
Host_getInterfaces = _umundoNativePython64.Host_getInterfaces

def Host_getHostId():
    return _umundoNativePython64.Host_getHostId()
Host_getHostId = _umundoNativePython64.Host_getHostId

class Message(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Message, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Message, name)
    __repr__ = _swig_repr
    UM_VERSION = _umundoNativePython64.Message_UM_VERSION
    UM_CONNECT_REQ = _umundoNativePython64.Message_UM_CONNECT_REQ
    UM_CONNECT_REP = _umundoNativePython64.Message_UM_CONNECT_REP
    UM_NODE_INFO = _umundoNativePython64.Message_UM_NODE_INFO
    UM_PUB_ADDED = _umundoNativePython64.Message_UM_PUB_ADDED
    UM_PUB_REMOVED = _umundoNativePython64.Message_UM_PUB_REMOVED
    UM_SUBSCRIBE = _umundoNativePython64.Message_UM_SUBSCRIBE
    UM_UNSUBSCRIBE = _umundoNativePython64.Message_UM_UNSUBSCRIBE
    UM_DEBUG = _umundoNativePython64.Message_UM_DEBUG
    UM_SHUTDOWN = _umundoNativePython64.Message_UM_SHUTDOWN
    NONE = _umundoNativePython64.Message_NONE
    ADOPT_DATA = _umundoNativePython64.Message_ADOPT_DATA
    WRAP_DATA = _umundoNativePython64.Message_WRAP_DATA
    __swig_getmethods__["typeToString"] = lambda x: _umundoNativePython64.Message_typeToString
    if _newclass:
        typeToString = staticmethod(_umundoNativePython64.Message_typeToString)

    def __init__(self, *args):
        this = _umundoNativePython64.new_Message(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _umundoNativePython64.delete_Message
    __del__ = lambda self: None

    def data(self):
        return _umundoNativePython64.Message_data(self)

    def size(self):
        return _umundoNativePython64.Message_size(self)

    def getFlags(self):
        return _umundoNativePython64.Message_getFlags(self)

    def compress(self):
        return _umundoNativePython64.Message_compress(self)

    def uncompress(self):
        return _umundoNativePython64.Message_uncompress(self)

    def isCompressed(self):
        return _umundoNativePython64.Message_isCompressed(self)

    def setData(self, data):
        return _umundoNativePython64.Message_setData(self, data)

    def putMeta(self, key, value):
        return _umundoNativePython64.Message_putMeta(self, key, value)

    def getMeta(self, *args):
        return _umundoNativePython64.Message_getMeta(self, *args)

    def setQueued(self, isQueued):
        return _umundoNativePython64.Message_setQueued(self, isQueued)

    def isQueued(self):
        return _umundoNativePython64.Message_isQueued(self)

    def setReceiver(self, uuid):
        return _umundoNativePython64.Message_setReceiver(self, uuid)
    __swig_getmethods__["toSubscriber"] = lambda x: _umundoNativePython64.Message_toSubscriber
    if _newclass:
        toSubscriber = staticmethod(_umundoNativePython64.Message_toSubscriber)

    def getMetaKeys(self):
        return _umundoNativePython64.Message_getMetaKeys(self)
Message_swigregister = _umundoNativePython64.Message_swigregister
Message_swigregister(Message)

def Message_typeToString(type):
    return _umundoNativePython64.Message_typeToString(type)
Message_typeToString = _umundoNativePython64.Message_typeToString

def Message_toSubscriber(uuid):
    return _umundoNativePython64.Message_toSubscriber(uuid)
Message_toSubscriber = _umundoNativePython64.Message_toSubscriber

class Options(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Options, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Options, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _umundoNativePython64.delete_Options
    __del__ = lambda self: None

    def getType(self):
        return _umundoNativePython64.Options_getType(self)

    def __init__(self):
        this = _umundoNativePython64.new_Options()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
Options_swigregister = _umundoNativePython64.Options_swigregister
Options_swigregister(Options)

class EndPointConfig(Options):
    __swig_setmethods__ = {}
    for _s in [Options]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EndPointConfig, name, value)
    __swig_getmethods__ = {}
    for _s in [Options]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EndPointConfig, name)
    __repr__ = _swig_repr
    TCP = _umundoNativePython64.EndPointConfig_TCP
    UDP = _umundoNativePython64.EndPointConfig_UDP

    def __init__(self, *args):
        this = _umundoNativePython64.new_EndPointConfig(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def getType(self):
        return _umundoNativePython64.EndPointConfig_getType(self)

    def setPort(self, nodePort):
        return _umundoNativePython64.EndPointConfig_setPort(self, nodePort)

    def setIP(self, nodeIp):
        return _umundoNativePython64.EndPointConfig_setIP(self, nodeIp)
    __swig_destroy__ = _umundoNativePython64.delete_EndPointConfig
    __del__ = lambda self: None
EndPointConfig_swigregister = _umundoNativePython64.EndPointConfig_swigregister
EndPointConfig_swigregister(EndPointConfig)

class EndPoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EndPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EndPoint, name)
    __repr__ = _swig_repr

    def __init__(self, address):
        this = _umundoNativePython64.new_EndPoint(address)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _umundoNativePython64.delete_EndPoint
    __del__ = lambda self: None

    def __nonzero__(self):
        return _umundoNativePython64.EndPoint___nonzero__(self)
    __bool__ = __nonzero__



    def __eq__(self, other):
        return _umundoNativePython64.EndPoint___eq__(self, other)

    def __ne__(self, other):
        return _umundoNativePython64.EndPoint___ne__(self, other)

    def __lt__(self, other):
        return _umundoNativePython64.EndPoint___lt__(self, other)

    def getAddress(self):
        return _umundoNativePython64.EndPoint_getAddress(self)

    def getIP(self):
        return _umundoNativePython64.EndPoint_getIP(self)

    def getTransport(self):
        return _umundoNativePython64.EndPoint_getTransport(self)

    def getPort(self):
        return _umundoNativePython64.EndPoint_getPort(self)

    def isRemote(self):
        return _umundoNativePython64.EndPoint_isRemote(self)

    def isInProcess(self):
        return _umundoNativePython64.EndPoint_isInProcess(self)

    def getHost(self):
        return _umundoNativePython64.EndPoint_getHost(self)

    def getDomain(self):
        return _umundoNativePython64.EndPoint_getDomain(self)

    def getLastSeen(self):
        return _umundoNativePython64.EndPoint_getLastSeen(self)

    def getUUID(self):
        return _umundoNativePython64.EndPoint_getUUID(self)

    def updateLastSeen(self):
        return _umundoNativePython64.EndPoint_updateLastSeen(self)
EndPoint_swigregister = _umundoNativePython64.EndPoint_swigregister
EndPoint_swigregister(EndPoint)

class PublisherStub(EndPoint):
    __swig_setmethods__ = {}
    for _s in [EndPoint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PublisherStub, name, value)
    __swig_getmethods__ = {}
    for _s in [EndPoint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PublisherStub, name)
    __repr__ = _swig_repr
    ZEROMQ = _umundoNativePython64.PublisherStub_ZEROMQ
    RTP = _umundoNativePython64.PublisherStub_RTP

    def __init__(self):
        this = _umundoNativePython64.new_PublisherStub()
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __nonzero__(self):
        return _umundoNativePython64.PublisherStub___nonzero__(self)
    __bool__ = __nonzero__



    def __lt__(self, other):
        return _umundoNativePython64.PublisherStub___lt__(self, other)

    def __eq__(self, other):
        return _umundoNativePython64.PublisherStub___eq__(self, other)

    def __ne__(self, other):
        return _umundoNativePython64.PublisherStub___ne__(self, other)

    def getChannelName(self):
        return _umundoNativePython64.PublisherStub_getChannelName(self)

    def isRTP(self):
        return _umundoNativePython64.PublisherStub_isRTP(self)
    __swig_destroy__ = _umundoNativePython64.delete_PublisherStub
    __del__ = lambda self: None
PublisherStub_swigregister = _umundoNativePython64.PublisherStub_swigregister
PublisherStub_swigregister(PublisherStub)

class SubscriberStub(EndPoint):
    __swig_setmethods__ = {}
    for _s in [EndPoint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SubscriberStub, name, value)
    __swig_getmethods__ = {}
    for _s in [EndPoint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SubscriberStub, name)
    __repr__ = _swig_repr
    ZEROMQ = _umundoNativePython64.SubscriberStub_ZEROMQ
    RTP = _umundoNativePython64.SubscriberStub_RTP
    __swig_destroy__ = _umundoNativePython64.delete_SubscriberStub
    __del__ = lambda self: None

    def __init__(self):
        this = _umundoNativePython64.new_SubscriberStub()
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __nonzero__(self):
        return _umundoNativePython64.SubscriberStub___nonzero__(self)
    __bool__ = __nonzero__



    def __lt__(self, other):
        return _umundoNativePython64.SubscriberStub___lt__(self, other)

    def __eq__(self, other):
        return _umundoNativePython64.SubscriberStub___eq__(self, other)

    def __ne__(self, other):
        return _umundoNativePython64.SubscriberStub___ne__(self, other)

    def getChannelName(self):
        return _umundoNativePython64.SubscriberStub_getChannelName(self)

    def isRTP(self):
        return _umundoNativePython64.SubscriberStub_isRTP(self)

    def isMulticast(self):
        return _umundoNativePython64.SubscriberStub_isMulticast(self)
SubscriberStub_swigregister = _umundoNativePython64.SubscriberStub_swigregister
SubscriberStub_swigregister(SubscriberStub)

class NodeStub(EndPoint):
    __swig_setmethods__ = {}
    for _s in [EndPoint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeStub, name, value)
    __swig_getmethods__ = {}
    for _s in [EndPoint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NodeStub, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _umundoNativePython64.new_NodeStub()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _umundoNativePython64.delete_NodeStub
    __del__ = lambda self: None

    def __nonzero__(self):
        return _umundoNativePython64.NodeStub___nonzero__(self)
    __bool__ = __nonzero__



    def __lt__(self, other):
        return _umundoNativePython64.NodeStub___lt__(self, other)

    def __eq__(self, other):
        return _umundoNativePython64.NodeStub___eq__(self, other)

    def __ne__(self, other):
        return _umundoNativePython64.NodeStub___ne__(self, other)

    def addPublisher(self, pub):
        return _umundoNativePython64.NodeStub_addPublisher(self, pub)

    def removePublisher(self, pub):
        return _umundoNativePython64.NodeStub_removePublisher(self, pub)

    def addSubscriber(self, sub):
        return _umundoNativePython64.NodeStub_addSubscriber(self, sub)

    def removeSubscriber(self, sub):
        return _umundoNativePython64.NodeStub_removeSubscriber(self, sub)

    def getSubscriber(self, uuid):
        return _umundoNativePython64.NodeStub_getSubscriber(self, uuid)

    def getPublisher(self, uuid):
        return _umundoNativePython64.NodeStub_getPublisher(self, uuid)

    def getSubscribers(self):
        return _umundoNativePython64.NodeStub_getSubscribers(self)

    def getPublishers(self):
        return _umundoNativePython64.NodeStub_getPublishers(self)

    def getPubKeys(self):
        return _umundoNativePython64.NodeStub_getPubKeys(self)

    def getSubKeys(self):
        return _umundoNativePython64.NodeStub_getSubKeys(self)
NodeStub_swigregister = _umundoNativePython64.NodeStub_swigregister
NodeStub_swigregister(NodeStub)

class Greeter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Greeter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Greeter, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _umundoNativePython64.delete_Greeter
    __del__ = lambda self: None

    def welcome(self, arg0, arg1):
        return _umundoNativePython64.Greeter_welcome(self, arg0, arg1)

    def farewell(self, arg0, arg1):
        return _umundoNativePython64.Greeter_farewell(self, arg0, arg1)

    def __init__(self):
        if self.__class__ == Greeter:
            _self = None
        else:
            _self = self
        this = _umundoNativePython64.new_Greeter(_self, )
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _umundoNativePython64.disown_Greeter(self)
        return weakref_proxy(self)
Greeter_swigregister = _umundoNativePython64.Greeter_swigregister
Greeter_swigregister(Greeter)

class Publisher(PublisherStub):
    __swig_setmethods__ = {}
    for _s in [PublisherStub]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Publisher, name, value)
    __swig_getmethods__ = {}
    for _s in [PublisherStub]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Publisher, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _umundoNativePython64.new_Publisher(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _umundoNativePython64.delete_Publisher
    __del__ = lambda self: None

    def __nonzero__(self):
        return _umundoNativePython64.Publisher___nonzero__(self)
    __bool__ = __nonzero__



    def __lt__(self, other):
        return _umundoNativePython64.Publisher___lt__(self, other)

    def __eq__(self, other):
        return _umundoNativePython64.Publisher___eq__(self, other)

    def __ne__(self, other):
        return _umundoNativePython64.Publisher___ne__(self, other)

    def send(self, *args):
        return _umundoNativePython64.Publisher_send(self, *args)

    def waitForSubscribers(self, count, timeoutMs=0):
        return _umundoNativePython64.Publisher_waitForSubscribers(self, count, timeoutMs)

    def setGreeter(self, greeter):
        return _umundoNativePython64.Publisher_setGreeter(self, greeter)

    def getGreeter(self):
        return _umundoNativePython64.Publisher_getGreeter(self)

    def putMeta(self, key, value):
        return _umundoNativePython64.Publisher_putMeta(self, key, value)

    def clearMeta(self, key):
        return _umundoNativePython64.Publisher_clearMeta(self, key)

    def isPublishingTo(self, subUUID):
        return _umundoNativePython64.Publisher_isPublishingTo(self, subUUID)

    def getSubscribers(self):
        return _umundoNativePython64.Publisher_getSubscribers(self)

    def suspend(self):
        return _umundoNativePython64.Publisher_suspend(self)

    def resume(self):
        return _umundoNativePython64.Publisher_resume(self)

    def added(self, sub, node):
        return _umundoNativePython64.Publisher_added(self, sub, node)

    def removed(self, sub, node):
        return _umundoNativePython64.Publisher_removed(self, sub, node)

    def getSubKeys(self):
        return _umundoNativePython64.Publisher_getSubKeys(self)
Publisher_swigregister = _umundoNativePython64.Publisher_swigregister
Publisher_swigregister(Publisher)

class PublisherConfig(Options):
    __swig_setmethods__ = {}
    for _s in [Options]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PublisherConfig, name, value)
    __swig_getmethods__ = {}
    for _s in [Options]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PublisherConfig, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _umundoNativePython64.delete_PublisherConfig
    __del__ = lambda self: None
PublisherConfig_swigregister = _umundoNativePython64.PublisherConfig_swigregister
PublisherConfig_swigregister(PublisherConfig)

class PublisherConfigTCP(PublisherConfig):
    __swig_setmethods__ = {}
    for _s in [PublisherConfig]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PublisherConfigTCP, name, value)
    __swig_getmethods__ = {}
    for _s in [PublisherConfig]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PublisherConfigTCP, name)
    __repr__ = _swig_repr

    def __init__(self, channel):
        this = _umundoNativePython64.new_PublisherConfigTCP(channel)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def enableCompression(self):
        return _umundoNativePython64.PublisherConfigTCP_enableCompression(self)
    __swig_destroy__ = _umundoNativePython64.delete_PublisherConfigTCP
    __del__ = lambda self: None
PublisherConfigTCP_swigregister = _umundoNativePython64.PublisherConfigTCP_swigregister
PublisherConfigTCP_swigregister(PublisherConfigTCP)

class PublisherConfigRTP(PublisherConfig):
    __swig_setmethods__ = {}
    for _s in [PublisherConfig]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PublisherConfigRTP, name, value)
    __swig_getmethods__ = {}
    for _s in [PublisherConfig]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PublisherConfigRTP, name)
    __repr__ = _swig_repr

    def __init__(self, channel):
        this = _umundoNativePython64.new_PublisherConfigRTP(channel)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def setTimestampIncrement(self, increment):
        return _umundoNativePython64.PublisherConfigRTP_setTimestampIncrement(self, increment)

    def setPortbase(self, port):
        return _umundoNativePython64.PublisherConfigRTP_setPortbase(self, port)

    def setPayloadType(self, type):
        return _umundoNativePython64.PublisherConfigRTP_setPayloadType(self, type)
    __swig_destroy__ = _umundoNativePython64.delete_PublisherConfigRTP
    __del__ = lambda self: None
PublisherConfigRTP_swigregister = _umundoNativePython64.PublisherConfigRTP_swigregister
PublisherConfigRTP_swigregister(PublisherConfigRTP)

class PublisherConfigMCast(PublisherConfigRTP):
    __swig_setmethods__ = {}
    for _s in [PublisherConfigRTP]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PublisherConfigMCast, name, value)
    __swig_getmethods__ = {}
    for _s in [PublisherConfigRTP]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PublisherConfigMCast, name)
    __repr__ = _swig_repr

    def __init__(self, channel):
        this = _umundoNativePython64.new_PublisherConfigMCast(channel)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _umundoNativePython64.delete_PublisherConfigMCast
    __del__ = lambda self: None
PublisherConfigMCast_swigregister = _umundoNativePython64.PublisherConfigMCast_swigregister
PublisherConfigMCast_swigregister(PublisherConfigMCast)

class Receiver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Receiver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Receiver, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _umundoNativePython64.delete_Receiver
    __del__ = lambda self: None

    def receive(self, msg):
        return _umundoNativePython64.Receiver_receive(self, msg)

    def __init__(self):
        if self.__class__ == Receiver:
            _self = None
        else:
            _self = self
        this = _umundoNativePython64.new_Receiver(_self, )
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _umundoNativePython64.disown_Receiver(self)
        return weakref_proxy(self)
Receiver_swigregister = _umundoNativePython64.Receiver_swigregister
Receiver_swigregister(Receiver)

class Subscriber(SubscriberStub):
    __swig_setmethods__ = {}
    for _s in [SubscriberStub]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Subscriber, name, value)
    __swig_getmethods__ = {}
    for _s in [SubscriberStub]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Subscriber, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _umundoNativePython64.new_Subscriber(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _umundoNativePython64.delete_Subscriber
    __del__ = lambda self: None

    def __nonzero__(self):
        return _umundoNativePython64.Subscriber___nonzero__(self)
    __bool__ = __nonzero__



    def __lt__(self, other):
        return _umundoNativePython64.Subscriber___lt__(self, other)

    def __eq__(self, other):
        return _umundoNativePython64.Subscriber___eq__(self, other)

    def __ne__(self, other):
        return _umundoNativePython64.Subscriber___ne__(self, other)

    def setReceiver(self, receiver):
        return _umundoNativePython64.Subscriber_setReceiver(self, receiver)

    def getReceiver(self):
        return _umundoNativePython64.Subscriber_getReceiver(self)

    def setChannelName(self, channelName):
        return _umundoNativePython64.Subscriber_setChannelName(self, channelName)

    def getNextMsg(self):
        return _umundoNativePython64.Subscriber_getNextMsg(self)

    def hasNextMsg(self):
        return _umundoNativePython64.Subscriber_hasNextMsg(self)

    def getPublishers(self):
        return _umundoNativePython64.Subscriber_getPublishers(self)

    def isSubscribedTo(self, uuid):
        return _umundoNativePython64.Subscriber_isSubscribedTo(self, uuid)

    def matches(self, pub):
        return _umundoNativePython64.Subscriber_matches(self, pub)

    def added(self, pub, node):
        return _umundoNativePython64.Subscriber_added(self, pub, node)

    def removed(self, pub, node):
        return _umundoNativePython64.Subscriber_removed(self, pub, node)

    def suspend(self):
        return _umundoNativePython64.Subscriber_suspend(self)

    def resume(self):
        return _umundoNativePython64.Subscriber_resume(self)

    def getPubKeys(self):
        return _umundoNativePython64.Subscriber_getPubKeys(self)
Subscriber_swigregister = _umundoNativePython64.Subscriber_swigregister
Subscriber_swigregister(Subscriber)

class SubscriberConfig(Options):
    __swig_setmethods__ = {}
    for _s in [Options]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SubscriberConfig, name, value)
    __swig_getmethods__ = {}
    for _s in [Options]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SubscriberConfig, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _umundoNativePython64.delete_SubscriberConfig
    __del__ = lambda self: None
SubscriberConfig_swigregister = _umundoNativePython64.SubscriberConfig_swigregister
SubscriberConfig_swigregister(SubscriberConfig)

class SubscriberConfigTCP(SubscriberConfig):
    __swig_setmethods__ = {}
    for _s in [SubscriberConfig]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SubscriberConfigTCP, name, value)
    __swig_getmethods__ = {}
    for _s in [SubscriberConfig]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SubscriberConfigTCP, name)
    __repr__ = _swig_repr

    def __init__(self, channel):
        this = _umundoNativePython64.new_SubscriberConfigTCP(channel)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _umundoNativePython64.delete_SubscriberConfigTCP
    __del__ = lambda self: None
SubscriberConfigTCP_swigregister = _umundoNativePython64.SubscriberConfigTCP_swigregister
SubscriberConfigTCP_swigregister(SubscriberConfigTCP)

class SubscriberConfigRTP(SubscriberConfigTCP):
    __swig_setmethods__ = {}
    for _s in [SubscriberConfigTCP]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SubscriberConfigRTP, name, value)
    __swig_getmethods__ = {}
    for _s in [SubscriberConfigTCP]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SubscriberConfigRTP, name)
    __repr__ = _swig_repr

    def __init__(self, channel):
        this = _umundoNativePython64.new_SubscriberConfigRTP(channel)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def setPortbase(self, port):
        return _umundoNativePython64.SubscriberConfigRTP_setPortbase(self, port)

    def setMulticastIP(self, ip):
        return _umundoNativePython64.SubscriberConfigRTP_setMulticastIP(self, ip)

    def setMulticastPortbase(self, port):
        return _umundoNativePython64.SubscriberConfigRTP_setMulticastPortbase(self, port)
    __swig_destroy__ = _umundoNativePython64.delete_SubscriberConfigRTP
    __del__ = lambda self: None
SubscriberConfigRTP_swigregister = _umundoNativePython64.SubscriberConfigRTP_swigregister
SubscriberConfigRTP_swigregister(SubscriberConfigRTP)

class SubscriberConfigMCast(SubscriberConfigRTP):
    __swig_setmethods__ = {}
    for _s in [SubscriberConfigRTP]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SubscriberConfigMCast, name, value)
    __swig_getmethods__ = {}
    for _s in [SubscriberConfigRTP]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SubscriberConfigMCast, name)
    __repr__ = _swig_repr

    def __init__(self, channel):
        this = _umundoNativePython64.new_SubscriberConfigMCast(channel)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _umundoNativePython64.delete_SubscriberConfigMCast
    __del__ = lambda self: None
SubscriberConfigMCast_swigregister = _umundoNativePython64.SubscriberConfigMCast_swigregister
SubscriberConfigMCast_swigregister(SubscriberConfigMCast)

class NodeConfig(EndPointConfig):
    __swig_setmethods__ = {}
    for _s in [EndPointConfig]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeConfig, name, value)
    __swig_getmethods__ = {}
    for _s in [EndPointConfig]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NodeConfig, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _umundoNativePython64.new_NodeConfig(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def getType(self):
        return _umundoNativePython64.NodeConfig_getType(self)

    def setPubPort(self, pubPort):
        return _umundoNativePython64.NodeConfig_setPubPort(self, pubPort)

    def allowLocalConnections(self, allow):
        return _umundoNativePython64.NodeConfig_allowLocalConnections(self, allow)
    __swig_destroy__ = _umundoNativePython64.delete_NodeConfig
    __del__ = lambda self: None
NodeConfig_swigregister = _umundoNativePython64.NodeConfig_swigregister
NodeConfig_swigregister(NodeConfig)

class Node(EndPoint):
    __swig_setmethods__ = {}
    for _s in [EndPoint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Node, name, value)
    __swig_getmethods__ = {}
    for _s in [EndPoint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Node, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _umundoNativePython64.new_Node(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _umundoNativePython64.delete_Node
    __del__ = lambda self: None

    def __nonzero__(self):
        return _umundoNativePython64.Node___nonzero__(self)
    __bool__ = __nonzero__



    def __lt__(self, other):
        return _umundoNativePython64.Node___lt__(self, other)

    def __eq__(self, other):
        return _umundoNativePython64.Node___eq__(self, other)

    def __ne__(self, other):
        return _umundoNativePython64.Node___ne__(self, other)

    def addSubscriber(self, sub):
        return _umundoNativePython64.Node_addSubscriber(self, sub)

    def removeSubscriber(self, sub):
        return _umundoNativePython64.Node_removeSubscriber(self, sub)

    def addPublisher(self, pub):
        return _umundoNativePython64.Node_addPublisher(self, pub)

    def removePublisher(self, pub):
        return _umundoNativePython64.Node_removePublisher(self, pub)

    def connectedTo(self):
        return _umundoNativePython64.Node_connectedTo(self)

    def connectedFrom(self):
        return _umundoNativePython64.Node_connectedFrom(self)

    def getSubscriber(self, uuid):
        return _umundoNativePython64.Node_getSubscriber(self, uuid)

    def getPublisher(self, uuid):
        return _umundoNativePython64.Node_getPublisher(self, uuid)

    def connect(self, connectable):
        return _umundoNativePython64.Node_connect(self, connectable)

    def disconnect(self, connectable):
        return _umundoNativePython64.Node_disconnect(self, connectable)

    def suspend(self):
        return _umundoNativePython64.Node_suspend(self)

    def resume(self):
        return _umundoNativePython64.Node_resume(self)

    def getSubscribers(self):
        return _umundoNativePython64.Node_getSubscribers(self)

    def getPublishers(self):
        return _umundoNativePython64.Node_getPublishers(self)

    def add(self, *args):
        return _umundoNativePython64.Node_add(self, *args)

    def remove(self, *args):
        return _umundoNativePython64.Node_remove(self, *args)

    def change(self, *args):
        return _umundoNativePython64.Node_change(self, *args)

    def getPubKeys(self):
        return _umundoNativePython64.Node_getPubKeys(self)

    def getSubKeys(self):
        return _umundoNativePython64.Node_getSubKeys(self)
Node_swigregister = _umundoNativePython64.Node_swigregister
Node_swigregister(Node)

class Connectable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Connectable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Connectable, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _umundoNativePython64.delete_Connectable
    __del__ = lambda self: None

    def getPublishers(self):
        return _umundoNativePython64.Connectable_getPublishers(self)

    def getSubscribers(self):
        return _umundoNativePython64.Connectable_getSubscribers(self)

    def addedToNode(self, node):
        return _umundoNativePython64.Connectable_addedToNode(self, node)

    def removedFromNode(self, node):
        return _umundoNativePython64.Connectable_removedFromNode(self, node)

    def __init__(self):
        if self.__class__ == Connectable:
            _self = None
        else:
            _self = self
        this = _umundoNativePython64.new_Connectable(_self, )
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _umundoNativePython64.disown_Connectable(self)
        return weakref_proxy(self)
Connectable_swigregister = _umundoNativePython64.Connectable_swigregister
Connectable_swigregister(Connectable)

class Discovery(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Discovery, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Discovery, name)
    __repr__ = _swig_repr
    IFACE_ADDED = _umundoNativePython64.Discovery_IFACE_ADDED
    IFACE_REMOVED = _umundoNativePython64.Discovery_IFACE_REMOVED
    MDNS = _umundoNativePython64.Discovery_MDNS
    BROADCAST = _umundoNativePython64.Discovery_BROADCAST

    def __init__(self, *args):
        this = _umundoNativePython64.new_Discovery(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _umundoNativePython64.delete_Discovery
    __del__ = lambda self: None

    def __nonzero__(self):
        return _umundoNativePython64.Discovery___nonzero__(self)
    __bool__ = __nonzero__



    def __lt__(self, other):
        return _umundoNativePython64.Discovery___lt__(self, other)

    def __eq__(self, other):
        return _umundoNativePython64.Discovery___eq__(self, other)

    def __ne__(self, other):
        return _umundoNativePython64.Discovery___ne__(self, other)

    def advertise(self, endpoint):
        return _umundoNativePython64.Discovery_advertise(self, endpoint)

    def add(self, node):
        return _umundoNativePython64.Discovery_add(self, node)

    def unadvertise(self, endpoint):
        return _umundoNativePython64.Discovery_unadvertise(self, endpoint)

    def remove(self, node):
        return _umundoNativePython64.Discovery_remove(self, node)

    def browse(self, query):
        return _umundoNativePython64.Discovery_browse(self, query)

    def unbrowse(self, query):
        return _umundoNativePython64.Discovery_unbrowse(self, query)

    def list(self):
        return _umundoNativePython64.Discovery_list(self)
Discovery_swigregister = _umundoNativePython64.Discovery_swigregister
Discovery_swigregister(Discovery)

class DiscoveryConfig(Options):
    __swig_setmethods__ = {}
    for _s in [Options]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiscoveryConfig, name, value)
    __swig_getmethods__ = {}
    for _s in [Options]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DiscoveryConfig, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def setDomain(self, domain):
        return _umundoNativePython64.DiscoveryConfig_setDomain(self, domain)
    __swig_destroy__ = _umundoNativePython64.delete_DiscoveryConfig
    __del__ = lambda self: None
DiscoveryConfig_swigregister = _umundoNativePython64.DiscoveryConfig_swigregister
DiscoveryConfig_swigregister(DiscoveryConfig)

class DiscoveryConfigMDNS(DiscoveryConfig):
    __swig_setmethods__ = {}
    for _s in [DiscoveryConfig]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiscoveryConfigMDNS, name, value)
    __swig_getmethods__ = {}
    for _s in [DiscoveryConfig]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DiscoveryConfigMDNS, name)
    __repr__ = _swig_repr
    TCP = _umundoNativePython64.DiscoveryConfigMDNS_TCP
    UDP = _umundoNativePython64.DiscoveryConfigMDNS_UDP

    def __init__(self):
        this = _umundoNativePython64.new_DiscoveryConfigMDNS()
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def setProtocol(self, protocol):
        return _umundoNativePython64.DiscoveryConfigMDNS_setProtocol(self, protocol)

    def setServiceType(self, serviceType):
        return _umundoNativePython64.DiscoveryConfigMDNS_setServiceType(self, serviceType)
    __swig_destroy__ = _umundoNativePython64.delete_DiscoveryConfigMDNS
    __del__ = lambda self: None
DiscoveryConfigMDNS_swigregister = _umundoNativePython64.DiscoveryConfigMDNS_swigregister
DiscoveryConfigMDNS_swigregister(DiscoveryConfigMDNS)

class DiscoveryConfigBCast(DiscoveryConfig):
    __swig_setmethods__ = {}
    for _s in [DiscoveryConfig]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiscoveryConfigBCast, name, value)
    __swig_getmethods__ = {}
    for _s in [DiscoveryConfig]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DiscoveryConfigBCast, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _umundoNativePython64.new_DiscoveryConfigBCast()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _umundoNativePython64.delete_DiscoveryConfigBCast
    __del__ = lambda self: None
DiscoveryConfigBCast_swigregister = _umundoNativePython64.DiscoveryConfigBCast_swigregister
DiscoveryConfigBCast_swigregister(DiscoveryConfigBCast)

# This file is compatible with both classic and new-style classes.


